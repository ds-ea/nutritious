datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// //////////////////////////////////////////
// ENUMS + TYPES
// //////////////////////////////////////////

enum EntityState {
  PENDING
  ENABLED
  DISABLED
  LOCKED

  ARCHIVED
  DELETED
}

type TimeFrame {
  state EntityState @default(ENABLED)
  from  DateTime?
  until DateTime?
}

// //////////////////////////////////////////
// AUTH + USERS
// //////////////////////////////////////////

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  state EntityState @default(ENABLED)

  name  String
  email String @unique

  password String
  settings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model AuthToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String @unique

  participantId String?      @db.ObjectId
  participant   Participant? @relation(fields: [participantId], references: [id])

  /// for expiring tokens independent of TTL
  expired Boolean?

  /// state when the token was "used up" by the user
  consumed   Boolean   @default(false)
  consumedAt DateTime?

  /// record must be retained until this date if set, regardless of expiration
  keepUntil DateTime?
  expiresAt DateTime?
}

// //////////////////////////////////////////
// SYSTEM
// //////////////////////////////////////////

model Page {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  state     EntityState @default(ENABLED)

  /// included in nav when set, can use string for use in template (e.g. multiple navs)
  nav	String?

  name  String
  alias String @unique

  body String?

  layout          String?
  metaDescription String?
}

// //////////////////////////////////////////
// DATA
// //////////////////////////////////////////

model BLS {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key          String @unique
  name         String
  translations Json?
}

// //////////////////////////////////////////
// STUDIES
// //////////////////////////////////////////

model Participant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ENABLED)

  key      String  @unique @default(cuid())
  legacyId BigInt?

  /// former fs_participant
  badge String?
  name  String?

  login    String @unique
  password String
  settings Json?

  /// preferred language
  lang     String?
  /// timezone offset in minutes
  timeZone Int?

  AuthToken   AuthToken[]
  GroupMember GroupMember[]
}

model Study {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  state     EntityState @default(ENABLED)

  participants GroupMember[]

  name         String
  translations Json?

  logPeriod          TimeFrame?
  registrationPeriod TimeFrame?

  schedules Schedule[]
  StepForm  StepForm[]
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ENABLED)

  participants GroupMember[]

  name         String
  instructions String?
  translations Json?

  regKey   String? @unique
  regPass  String?
  /// maximum number of registrations
  regLimit Int?

  logPeriod          TimeFrame?
  registrationPeriod TimeFrame?

  scheduleId String?   @db.ObjectId
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
}

/// relation pivot for more convenient switching to relational DB
model GroupMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studyId String? @db.ObjectId
  study   Study?  @relation(fields: [studyId], references: [id])

  groupId String? @db.ObjectId
  group   Group?  @relation(fields: [groupId], references: [id])

  participantId String?      @db.ObjectId
  participant   Participant? @relation(fields: [participantId], references: [id])

  badge String?
  notes String?

  @@unique([groupId, participantId])
  @@index([participantId])
}

type StepSetup {
  stepId String @db.ObjectId
}

type ScheduleWeekSetup {
  /// from 0 (Sunday) to 6 (Saturday)
  startOfWeek Int @default(0)
}

type ScheduleDaySetup {
  /// which days of the week this applies to - 0 (Sunday) to 6 (Saturday)
  days Int[]

  /// start of day - offset in minutes from midnight
  start Int
  /// end of day - offset in minutes from midnight
  end   Int?
  /// day end grace period in minute
  grace Int?
}

type SlotTimeFrame {
  allDay Boolean?

  /// offset from day start in minutes
  start    Int?
  /// offset from start in minutes
  duration Int?
  /// grace period after duration in minutes
  grace    Int?
}

type SlotImportance {
  obligatory Boolean?
  min        Int?
  max        Int?
  // range the limits relate to ( occurance, same-day, same-week, same-month, 123-minutes )
  per        String?
  // repeat within slot availability every n-minutes
  every      Int?
}

type SlotReminder {
  /// offset when the reminder is shown
  when   Int?
  silent Boolean?

  title        String?
  message      String?
  translations Json?
}

type SlotDependency {
  key        String
  matchValue Json?
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String?
  notes String?

  isTemplate Boolean?

  daySetup  ScheduleDaySetup[]
  weekSetup ScheduleWeekSetup[]

  studyId String? @db.ObjectId
  study   Study?  @relation(fields: [studyId], references: [id])

  groups Group[]
  Slot   Slot[]
}

model Slot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduleId String?   @db.ObjectId
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])

  key          String
  name         String
  translations Json?

  /// assigned to system events (overwrites date and availability)
  event        String?
  /// for explicit dates (combines with availability when set, otherwise all day)
  date         DateTime?
  /// when the slot is available (at any time otherwise)
  availability SlotTimeFrame?

  importance SlotImportance?
  reminders  SlotReminder[]

  /// dependency on another slot's
  dependsOn SlotDependency?

  steps     Step[]
  stepOrder StepSetup[]
}

model Step {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      String
  reference String?

  slotId String? @db.ObjectId
  slot   Slot?   @relation(fields: [slotId], references: [id])
}

model StepForm {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  template Boolean?

  studyId String? @db.ObjectId
  study   Study?  @relation(fields: [studyId], references: [id])
}

model StudyContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  title        String
  body         String
  translations String?
}

model Response {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stepId        String  @db.ObjectId
  slotId        String  @db.ObjectId
  slotKey       String?
  participantId String  @db.ObjectId

  data Json

  @@index([participantId, slotKey])
}
