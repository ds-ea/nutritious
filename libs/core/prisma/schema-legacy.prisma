datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LEGACY")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client-legacy"
}

model data_types {
  id                    Int         @id @default(autoincrement()) @db.UnsignedInt
  name                  String      @unique(map: "data_types_name_unique") @db.VarChar(255)
  slug                  String      @unique(map: "data_types_slug_unique") @db.VarChar(255)
  display_name_singular String      @db.VarChar(255)
  display_name_plural   String      @db.VarChar(255)
  icon                  String?     @db.VarChar(255)
  model_name            String?     @db.VarChar(255)
  policy_name           String?     @db.VarChar(255)
  controller            String?     @db.VarChar(255)
  description           String?     @db.VarChar(255)
  generate_permissions  Boolean     @default(false)
  server_side           Int         @default(0) @db.TinyInt
  details               String?     @db.Text
  created_at            DateTime?   @db.Timestamp(0)
  updated_at            DateTime?   @db.Timestamp(0)
  data_rows             data_rows[]
}

////////////////////////////////////////
// NUTRITIOUS MODELS START
////////////////////////////////////////

model LegacyBLS {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  bls_key String @db.VarChar(12)
  name_de String @db.VarChar(255)
  name_en String @db.VarChar(255)

  @@map("fs_bls")
}

model LegacyLog {
  id       BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user     BigInt   @db.UnsignedBigInt
  study    Int      @db.UnsignedInt
  date     DateTime @default(now()) @db.Timestamp(0)
  received DateTime @default(now()) @db.Timestamp(0)
  data     Json?

  @@index([date], map: "fs_log_date_index")
  @@map("fs_log")
}

model LegacyLogFood {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user      BigInt   @db.UnsignedBigInt
  study     Int      @db.UnsignedInt
  date      DateTime @default(now()) @db.Timestamp(0)
  received  DateTime @default(now()) @db.Timestamp(0)
  bls       Int?     @db.UnsignedInt
  bls_key   String?  @db.VarChar(255)
  meal_type String?  @db.VarChar(128)
  people    Int      @db.UnsignedSmallInt
  data      Json?

  @@index([date], map: "fs_log_food_date_index")
  @@map("fs_log_food")
}

model LegacyStudy {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  name             String    @db.VarChar(255)
  prefix           String    @unique(map: "fs_studies_prefix_unique") @db.VarChar(32)
  from             DateTime  @default(now()) @db.Timestamp(0)
  until            DateTime? @db.Timestamp(0)
  reg_public       Boolean   @default(false)
  reg_key          String?   @unique @db.VarChar(128)
  reg_pass         String?   @db.VarChar(64)
  reg_limit        Int?      @db.UnsignedInt
  user_count       Int       @default(0) @db.UnsignedInt
  question_catalog Json?

  @@map("fs_studies")
}

////////////////////////////////////////
// NUTRITIOUS MODELS END
////////////////////////////////////////

model LegacyPage {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  title            String       @db.VarChar(255)
  excerpt          String?      @db.Text
  body             String?      @db.Text
  image            String?      @db.VarChar(255)
  slug             String       @unique(map: "pages_slug_unique") @db.VarChar(255)
  meta_description String?      @db.Text
  status           pages_status @default(INACTIVE)
  created_at       DateTime?    @default(now())
  updated_at       DateTime?    @default(now()) @updatedAt
  layout           String?      @db.Text

  @@map("pages")
}

model LegacyUser {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  role_id           BigInt?   @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  username          String    @unique(map: "users_username_unique") @db.VarChar(255)
  email             String?   @unique(map: "users_email_unique") @db.VarChar(255)
  avatar            String?   @default("users/default.png") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  api_token         String?   @unique(map: "users_api_token_unique") @db.VarChar(80)
  remember_token    String?   @db.VarChar(100)
  settings          String?   @db.Text
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now()) @updatedAt
  fs_study          Int?      @db.UnsignedInt
  fs_participant    String?   @db.VarChar(128)
  // user_roles        user_roles[]
  // roles             roles?       @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_role_id_foreign")

  @@index([role_id], map: "users_role_id_foreign")
  @@map("users")
}

////////////////////////////////////////
// VOYAGER / LEGACY BELOW
////////////////////////////////////////

model settings {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  key          String  @unique(map: "settings_key_unique") @db.VarChar(255)
  display_name String  @db.VarChar(255)
  value        String? @db.Text
  details      String? @db.Text
  type         String  @db.VarChar(255)
  order        Int     @default(1)
  group        String? @db.VarChar(255)
}

model blog_posts {
  id               Int               @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  category_id      Int?
  title            String            @db.VarChar(255)
  seo_title        String?           @db.VarChar(255)
  excerpt          String            @db.Text
  body             String            @db.Text
  image            String?           @db.VarChar(255)
  slug             String            @unique(map: "blog_posts_slug_unique") @db.VarChar(255)
  meta_description String            @db.Text
  status           blog_posts_status @default(DRAFT)
  featured         Boolean           @default(false)
  created_at       DateTime?         @default(now())
  updated_at       DateTime?         @default(now()) @updatedAt
  tags             String?           @db.Text
  published_date   DateTime?         @default(now()) @db.Timestamp(0)
}

model categories {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  parent_id        Int?         @db.UnsignedInt
  order            Int          @default(1)
  name             String       @db.VarChar(255)
  slug             String       @unique(map: "categories_slug_unique") @db.VarChar(255)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], map: "categories_parent_id_foreign")
  other_categories categories[] @relation("categoriesTocategories")

  @@index([parent_id], map: "categories_parent_id_foreign")
}

model data_rows {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  data_type_id Int        @db.UnsignedInt
  field        String     @db.VarChar(255)
  type         String     @db.VarChar(255)
  display_name String     @db.VarChar(255)
  required     Boolean    @default(false)
  browse       Boolean    @default(true)
  read         Boolean    @default(true)
  edit         Boolean    @default(true)
  add          Boolean    @default(true)
  delete       Boolean    @default(true)
  details      String?    @db.Text
  order        Int        @default(1)
  data_types   data_types @relation(fields: [data_type_id], references: [id], onDelete: Cascade, map: "data_rows_data_type_id_foreign")

  @@index([data_type_id], map: "data_rows_data_type_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model menu_items {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  menu_id    Int?      @db.UnsignedInt
  title      String    @db.VarChar(255)
  url        String    @db.VarChar(255)
  target     String    @default("_self") @db.VarChar(255)
  icon_class String?   @db.VarChar(255)
  color      String?   @db.VarChar(255)
  parent_id  Int?
  order      Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  route      String?   @db.VarChar(255)
  parameters String?   @db.Text
  menus      menus?    @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_menu_id_foreign")

  @@index([menu_id], map: "menu_items_menu_id_foreign")
}

model menus {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  name       String       @unique(map: "menus_name_unique") @db.VarChar(255)
  created_at DateTime?    @default(now())
  updated_at DateTime?    @default(now()) @updatedAt
  menu_items menu_items[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @default(now())

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model permission_role {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "permission_role_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "permission_role_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([permission_id], map: "permission_role_permission_id_index")
  @@index([role_id], map: "permission_role_role_id_index")
}

model permissions {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  key             String            @db.VarChar(255)
  table_name      String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]

  @@index([key], map: "permissions_key_index")
}

model roles {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @unique(map: "roles_name_unique") @db.VarChar(255)
  display_name    String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
  //  user_roles      user_roles[]
  //  users           User[]
}

model translations {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  table_name  String    @db.VarChar(255)
  column_name String    @db.VarChar(255)
  foreign_key Int       @db.UnsignedInt
  locale      String    @db.VarChar(255)
  value       String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@unique([table_name, column_name, foreign_key, locale], map: "translations_table_name_column_name_foreign_key_locale_unique")
}

// model user_roles {
//   user_id BigInt @db.UnsignedBigInt
//   role_id BigInt @db.UnsignedBigInt
//   roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_role_id_foreign")
//   users   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_user_id_foreign")
//
//   @@id([user_id, role_id])
//   @@index([role_id], map: "user_roles_role_id_index")
//   @@index([user_id], map: "user_roles_user_id_index")
// }

enum pages_status {
  ACTIVE
  INACTIVE
}

enum blog_posts_status {
  PUBLISHED
  DRAFT
  PENDING
}
